@page
@model AmxBookstore.Pages.Protected.Orders.EditModel
@{
    ViewData["Title"] = "Edit Order";
}

<h2>Edit Order</h2>

<form id="editOrderForm">
    <input type="hidden" id="OrderId" name="OrderId" />
    <div class="form-group">
        <label for="SellerId">Seller ID</label>
        <input type="text" class="form-control" id="SellerId" name="SellerId" required />
    </div>
    <div class="form-group">
        <label for="ClientId">Client ID</label>
        <input type="text" class="form-control" id="ClientId" name="ClientId" required />
    </div>
    <div class="form-group">
        <label for="TotalAmount">Total Amount</label>
        <input type="number" class="form-control" id="TotalAmount" name="TotalAmount" required />
    </div>
    <div class="form-group">
        <label for="Status">Status</label>
        <select class="form-control" id="Status" name="Status">
            <option value="Created">Created</option>
            <option value="Delivering">Delivering</option>
            <option value="Finished">Finished</option>
            <option value="Canceled">Canceled</option>
        </select>
    </div>

    <div class="form-group">
        <label>Products</label>
        <div id="productsContainer">
            <!-- Product items will be added here dynamically -->
        </div>
        <button type="button" class="btn btn-secondary mt-2" onclick="addProduct()">Add Product</button>
    </div>

    <button type="submit" class="btn btn-primary mt-3">Save</button>
</form>

@section Scripts {
    <script>
        async function fetchOrder(id) {
            try {
                const response = await fetchWithToken(`http://localhost:32787/api/v1/Orders/${id}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const order = await response.json();
                document.getElementById('OrderId').value = order.id;
                document.getElementById('SellerId').value = order.sellerId;
                document.getElementById('ClientId').value = order.clientId;
                document.getElementById('TotalAmount').value = order.totalAmount;
                document.getElementById('Status').value = order.status;

                // Populate products
                order.products.forEach((product, index) => addProduct(product.productId, product.quantity, index));
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error fetching order',
                    text: error.message,
                });
            }
        }

        function addProduct(productId = '', quantity = '', index = null) {
            const productIndex = index !== null ? index : document.querySelectorAll('.product-item').length;
            const productHtml = `
                        <div class="product-item mb-2">
                            <div class="form-row">
                                <div class="form-group col-md-6">
                                    <label for="ProductId${productIndex}">Product ID</label>
                                    <input type="text" class="form-control" id="ProductId${productIndex}" name="ProductId${productIndex}" value="${productId}" required />
                                </div>
                                <div class="form-group col-md-4">
                                    <label for="Quantity${productIndex}">Quantity</label>
                                    <input type="number" class="form-control" id="Quantity${productIndex}" name="Quantity${productIndex}" value="${quantity}" required />
                                </div>
                                <div class="form-group col-md-2 d-flex align-items-end">
                                    <button type="button" class="btn btn-danger mt-2" onclick="removeProduct(this)">Remove</button>
                                </div>
                            </div>
                        </div>
                    `;
            document.getElementById('productsContainer').insertAdjacentHTML('beforeend', productHtml);
        }

        function removeProduct(button) {
            button.closest('.product-item').remove();
        }

        document.addEventListener('DOMContentLoaded', () => {
            const urlParams = new URLSearchParams(window.location.search);
            const orderId = urlParams.get('id');
            fetchOrder(orderId);
        });

        document.getElementById('editOrderForm').addEventListener('submit', async function (event) {
            event.preventDefault();

            const products = [];
            document.querySelectorAll('.product-item').forEach((item, index) => {
                const productId = item.querySelector(`#ProductId${index}`).value;
                const quantity = item.querySelector(`#Quantity${index}`).value;
                products.push({ productId, quantity });
            });

            const order = {
                id: document.getElementById('OrderId').value,
                sellerId: document.getElementById('SellerId').value,
                clientId: document.getElementById('ClientId').value,
                totalAmount: document.getElementById('TotalAmount').value,
                status: document.getElementById('Status').value,
            };

            try {
                const response = await fetchWithToken(`http://localhost:32787/api/v1/Orders/`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(order)
                });

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Order updated successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.href = './Index';
                    });
                } else {
                    const errorData = await response.json();
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to update order',
                        text: errorData.message || 'An error occurred',
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed to update order',
                    text: error.message,
                });
            }
        });
    </script>
}
