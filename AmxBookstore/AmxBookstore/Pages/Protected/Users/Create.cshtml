@page
@model AmxBookstore.Pages.Protected.Users.CreateModel
@{
    ViewData["Title"] = "Create User";
}

<h2>Create User</h2>

<form id="createUserForm">
    <div class="form-group">
        <label for="Name">Name</label>
        <input type="text" class="form-control" id="Name" name="Name" required />
    </div>
    <div class="form-group">
        <label for="Email">Email</label>
        <input type="email" class="form-control" id="Email" name="Email" required />
    </div>
    <div class="form-group">
        <label for="Role">Role</label>
        <select class="form-control" id="Role" name="Role" required>
            <option value="Admin">Admin</option>
            <option value="Seller">Seller</option>
            <option value="Client">Client</option>
        </select>
    </div>
    <div class="form-group">
        <label for="Password">Password</label>
        <input type="password" class="form-control" id="Password" name="Password" required />
    </div>
    <button type="submit" class="btn btn-primary mt-3">Create</button>
</form>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script>
        document.getElementById('createUserForm').addEventListener('submit', async function (event) {
            event.preventDefault();

            const user = {
                name: document.getElementById('Name').value,
                email: document.getElementById('Email').value,
                role: document.getElementById('Role').value,
                password: document.getElementById('Password').value
            };

            try {
                const response = await fetchWithToken('http://localhost:5000/api/v1/Users', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(user)
                });

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'User created successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.href = './Index';
                    });
                } else if (response.status == 401 && response.status == 403) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to create user',
                        text: 'Unauthorized',
                    });
                }
                else {
                    const errorData = await response.json();
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to create user',
                        text: errorData.message || 'An error occurred',
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed to create user',
                    text: error.message,
                });
            }
        });

        async function fetchWithToken(url, options = {}) {
            const token = localStorage.getItem('jwt');
            if (!token) {
                throw new Error('No JWT token found in localStorage');
            }

            const headers = new Headers(options.headers || {});
            headers.append('Authorization', `Bearer ${JSON.parse(token).accessToken}`);

            const updatedOptions = {
                ...options,
                headers: headers
            };

            return fetch(url, updatedOptions);
        }
    </script>
}
