@page
@model AmxBookstore.Pages.Protected.Books.IndexModel
@{
    ViewData["Title"] = "Books";
}

<h2>Books</h2>

<a asp-page="./Create" class="btn btn-primary mb-3">Create New Book</a>

<form id="filterForm" class="mb-4">
    <div class="form-row d-flex flex">
        <div class="form-group col-md-2 mr-2 m-1">
            <label for="Title">Title</label>
            <input type="text" class="form-control" id="Title" name="Title" />
        </div>
        <div class="form-group col-md-2 mr-2 m-1">
            <label for="Author">Author</label>
            <input type="text" class="form-control" id="Author" name="Author" />
        </div>
        <div class="form-group col-md-1 mr-2 m-1">
            <label for="MinPrice">Min Price</label>
            <input type="number" step="0.01" class="form-control" id="MinPrice" name="MinPrice" />
        </div>
        <div class="form-group col-md-1 mr-2 m-1">
            <label for="MaxPrice">Max Price</label>
            <input type="number" step="0.01" class="form-control" id="MaxPrice" name="MaxPrice" />
        </div>
        <div class="form-group col-md-1 mr-2 m-1">
            <label for="MinPages">Min Pages</label>
            <input type="number" class="form-control" id="MinPages" name="MinPages" />
        </div>
        <div class="form-group col-md-1 mr-2 m-1">
            <label for="MaxPages">Max Pages</label>
            <input type="number" class="form-control" id="MaxPages" name="MaxPages" />
        </div>
        <div class="form-group col-md-2 align-self-end m-1">
            <button type="submit" class="btn btn-primary">Apply Filters</button>
        </div>
    </div>
</form>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Book ID</th>
            <th>Title</th>
            <th>Author</th>
            <th>Pages</th>
            <th>Price</th>
            <th>Actions</th>
        </tr>
    </thead>
    <tbody id="booksTableBody">
        <!-- Books will be populated here by JavaScript -->
    </tbody>
</table>

<div class="d-flex justify-content-between mt-3">
    <button id="prevPage" class="btn btn-secondary" disabled>Previous</button>
    <button id="nextPage" class="btn btn-secondary">Next</button>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script>
        let currentPage = 1;
        const limit = 10;

        async function fetchBooks(page) {
            const params = new URLSearchParams({
                page: page,
                limit: limit,
                title: document.getElementById('Title').value,
                author: document.getElementById('Author').value,
                minPrice: document.getElementById('MinPrice').value,
                maxPrice: document.getElementById('MaxPrice').value,
                minPages: document.getElementById('MinPages').value,
                maxPages: document.getElementById('MaxPages').value
            });

            try {
                const response = await fetchWithToken(`http://localhost:32787/api/v1/Books?${params.toString()}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const books = await response.json();

                const tableBody = document.getElementById('booksTableBody');
                tableBody.innerHTML = ''; // Clear existing rows
                books.forEach(book => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                                        <td>${book.id}</td>
                                        <td>${book.title}</td>
                                        <td>${book.author}</td>
                                        <td>${book.pages}</td>
                                        <td>${book.price}</td>
                                        <td>
                                            <a href="/Protected/Books/Edit?id=${book.id}" class="btn btn-sm btn-outline-secondary">Edit</a>
                                            <a href="/Protected/Books/Delete?id=${book.id}" class="btn btn-sm btn-outline-danger">Delete</a>
                                            <a href="/Protected/Stock/Edit?id=${book.id}" class="btn btn-sm btn-outline-warning">Edit Stock</a>
                                        </td>
                                    `;
                    tableBody.appendChild(row);
                });

                // Enable/disable pagination buttons based on current page and total pages
                document.getElementById('prevPage').disabled = page <= 1;
                document.getElementById('nextPage').disabled = page >= 100;

            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed to fetch books',
                    text: error.message,
                });
            }
        }

        document.getElementById('filterForm').addEventListener('submit', function (event) {
            event.preventDefault();
            currentPage = 1; // Reset to the first page when applying new filters
            fetchBooks(currentPage);
        });

        document.getElementById('prevPage').addEventListener('click', () => {
            if (currentPage > 1) {
                currentPage--;
                fetchBooks(currentPage);
            }
        });

        document.getElementById('nextPage').addEventListener('click', () => {
            currentPage++;
            fetchBooks(currentPage);
        });

        document.addEventListener('DOMContentLoaded', () => {
            fetchBooks(currentPage);
        });

        async function fetchWithToken(url, options = {}) {
            const token = localStorage.getItem('jwt');
            if (!token) {
                throw new Error('No JWT token found in localStorage');
            }

            const headers = new Headers(options.headers || {});
            headers.append('Authorization', `Bearer ${JSON.parse(token).accessToken}`);

            const updatedOptions = {
                ...options,
                headers: headers
            };

            return fetch(url, updatedOptions);
        }
    </script>
}
