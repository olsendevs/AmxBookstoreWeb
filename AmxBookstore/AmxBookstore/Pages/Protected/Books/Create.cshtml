@page
@model AmxBookstore.Pages.Protected.Books.CreateModel
@{
    ViewData["Title"] = "Create Book";
}

<h2>Create Book</h2>

<form id="createBookForm">
    <div class="form-group">
        <label for="Title">Title</label>
        <input type="text" class="form-control" id="Title" name="Title" required />
    </div>
    <div class="form-group">
        <label for="Description">Description</label>
        <textarea class="form-control" id="Description" name="Description" required></textarea>
    </div>
    <div class="form-group">
        <label for="Pages">Pages</label>
        <input type="number" class="form-control" id="Pages" name="Pages" required />
    </div>
    <div class="form-group">
        <label for="Author">Author</label>
        <input type="text" class="form-control" id="Author" name="Author" required />
    </div>
    <div class="form-group">
        <label for="Price">Price</label>
        <input type="number" step="0.01" class="form-control" id="Price" name="Price" required />
    </div>
    <button type="submit" class="btn btn-primary mt-3">Create</button>
</form>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script>
        document.getElementById('createBookForm').addEventListener('submit', async function (event) {
            event.preventDefault();

            const book = {
                title: document.getElementById('Title').value,
                description: document.getElementById('Description').value,
                pages: document.getElementById('Pages').value,
                author: document.getElementById('Author').value,
                price: document.getElementById('Price').value
            };

            try {
                const response = await fetchWithToken('http://localhost:32787/api/v1/Books', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(book)
                });
                console.log(response)
                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Book created successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.href = './Index';
                    });
                } else if (response.status == 401 || response.status == 403) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to create user',
                        text: 'Unauthorized',
                    });
                } else {
                    const errorData = await response.json();
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to create book',
                        text: errorData.message || 'An error occurred',
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed to create book',
                    text: error.message,
                });
            }
        });
    </script>
}
