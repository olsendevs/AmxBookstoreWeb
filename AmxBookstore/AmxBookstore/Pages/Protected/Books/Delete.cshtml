@page
@model AmxBookstore.Pages.Protected.Books.DeleteModel
@{
    ViewData["Title"] = "Delete Book";
}

<h2>Delete Book</h2>

<h3>Are you sure you want to delete this book?</h3>

<div>
    <h4>Book</h4>
    <div>
        <dl class="row">
            <dt class="col-sm-2">Book ID</dt>
            <dd class="col-sm-10" id="BookId"></dd>
            <dt class="col-sm-2">Title</dt>
            <dd class="col-sm-10" id="Title"></dd>
            <dt class="col-sm-2">Author</dt>
            <dd class="col-sm-10" id="Author"></dd>
            <dt class="col-sm-2">Pages</dt>
            <dd class="col-sm-10" id="Pages"></dd>
            <dt class="col-sm-2">Price</dt>
            <dd class="col-sm-10" id="Price"></dd>
        </dl>
    </div>

    <form id="deleteBookForm" method="post">
        <input type="hidden" id="BookIdInput" name="BookId" />
        <button type="submit" class="btn btn-danger">Delete</button>
        <a asp-page="./Index" class="btn btn-secondary">Cancel</a>
    </form>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
    <script>
        async function fetchBook(id) {
            try {
                const response = await fetchWithToken(`http://localhost:32787/api/v1/Books/${id}`);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                const book = await response.json();
                document.getElementById('BookId').innerText = book.id;
                document.getElementById('Title').innerText = book.title;
                document.getElementById('Author').innerText = book.author;
                document.getElementById('Pages').innerText = book.pages;
                document.getElementById('Price').innerText = book.price;
                document.getElementById('BookIdInput').value = book.id;
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Error fetching book',
                    text: error.message,
                });
            }
        }

        document.addEventListener('DOMContentLoaded', () => {
            const urlParams = new URLSearchParams(window.location.search);
            const bookId = urlParams.get('id');
            fetchBook(bookId);
        });

        document.getElementById('deleteBookForm').addEventListener('submit', async function (event) {
            event.preventDefault();

            const bookId = document.getElementById('BookIdInput').value;
            try {
                const response = await fetchWithToken(`http://localhost:32787/api/v1/Books/${bookId}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Book deleted successfully',
                        showConfirmButton: false,
                        timer: 1500
                    }).then(() => {
                        window.location.href = './Index';
                    });
                } else {
                    const errorData = await response.json();
                    Swal.fire({
                        icon: 'error',
                        title: 'Failed to delete book',
                        text: errorData.message || 'An error occurred',
                    });
                }
            } catch (error) {
                Swal.fire({
                    icon: 'error',
                    title: 'Failed to delete book',
                    text: error.message,
                });
            }
        });
    </script>
}
